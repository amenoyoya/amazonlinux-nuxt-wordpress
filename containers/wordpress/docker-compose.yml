version: "3"

# サービスコンテナ
services:
  # apache + php + wordpress
  web:
    build:
      context: ./docker/web # ./docker/web/Dockerfile からビルド
      args:
        UID: $UID # Docker実行ユーザIDをビルド時に使用
    links:
      - db # dbコンテナとリンク
      - smtp # smtpコンテナとリンク
    ports:
      - 1000:80
    volumes:
      # 開発ディレクトリ（DocumentRoot: /var/www/html/）
      - ./www/:/var/www/
      # Apache設定ファイルを反映
      - ./docker/web/000-default.conf:/etc/apache2/sites-available/000-default.conf
      # php設定ファイルを反映
      - ./docker/web/php.ini:/usr/local/etc/php/php.ini
    environment:
      WORDPRESS_DB_HOST: db:3306 # docker://db:3306 をDBホストにする
      WORDPRESS_DB_USER: root # = docker://db.environemt.MYSQL_USER
      WORDPRESS_DB_PASSWORD: root # = docker://db.environment.MYSQL_PASSWORD
      WORDPRESS_DB_NAME: wordpress # = docker://db.environment.MYSQL_DATABASE
      WORDPRESS_DB_CHARSET: utf8mb4 # WordPressのデータベース文字コードを utf8mb4 に
      WORDPRESS_DB_COLLATE: utf8mb4_general_ci # WordPressのデータベース照合順序を utf8mb4_general_ci に
      WORDPRESS_DB_PREFIX: wp_ # WordPressのデータベーステーブル接頭辞を wp_ に
      WORDPRESS_DEBUG: "false" # WordPressデバッグモードを false に
      # VIRTUAL_HOST設定（nginx-proxy）
      VIRTUAL_HOST: web.local # https://web.local/ => docker://pma:80
      VIRTUAL_PORT: 80
      CERT_NAME: default # ローカル開発時は自己証明書を使う
  
  # MySQL サーバ
  db:
    build: ./docker/db
    volumes:
      # DB永続化: db-dataボリュームコンテナをマウント
      - db-data:/var/lib/mysql/
      # 起動時にinitdb.d内で定義されたデータベースを構築する
      - ./docker/db/initdb.d/:/docker-entrypoint-initdb.d/
      # ダンプデータ共有用ディレクトリ
      - ./docker/db/dump/:/var/dump/
    # 作業ディレクトリ
    working_dir: /var/dump/
    environment:
      MYSQL_ROOT_PASSWORD: root # rootユーザパスワード
      MYSQL_DATABASE: wordpress # 使用データベース名
  
  # phpMyAdmin
  pma:
    image: phpmyadmin/phpmyadmin:latest
    links:
      - db
    ports:
      - 2000:80
    environment:
      PMA_HOST: db
      # VIRTUAL_HOST設定（nginx-proxy）
      VIRTUAL_HOST: pma.web.local # https://pma.web.local/ => docker://pma:80
      VIRTUAL_PORT: 80
      CERT_NAME: default # ローカル開発時は自己証明書を使う
  
  # ローカルSMTPサーバ
  smtp:
    image: mailhog/mailhog
    ports:
      - 3000:8025 # HTTP Port (nginx-proxyコンテナを使っているならポート設定は不要)
      - 4000:1025 # SMTP Port
    environment:
      # VIRTUAL_HOST設定（nginx-proxy）
      VIRTUAL_HOST: mail.web.local # https://mail.web.local/ => docker://mailhog:8025
      VIRTUAL_PORT: 8025
      CERT_NAME: default # ローカル開発時は自己証明書を使う
  
  # --- VIRTUAL_HOST を使う場合は以下 nginx-proxy と letsencrypt コンテナを有効化する ---
  # # vhostプロキシサーバ
  # nginx-proxy:
  #   image: jwilder/nginx-proxy
  #   privileged: true # ルート権限
  #   ports:
  #     - "80:80" # http
  #     - "443:443" # https
  #   volumes:
  #     - /var/run/docker.sock/:/tmp/docker.sock/:ro
  #     - /usr/share/nginx/html/
  #     - /etc/nginx/vhost.d/
  #     - ./docker/certs/:/etc/nginx/certs/:ro # letsencryptコンテナが ./docker/certs/ に作成したSSL証明書を読む
  #   environment:
  #     DHPARAM_GENERATION: "false"
  #   labels:
  #     com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"

  # # 無料SSL証明書発行コンテナ
  # letsencrypt:
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   volumes:
  #     - /var/run/docker.sock/:/var/run/docker.sock/:ro
  #     - /usr/share/nginx/html/
  #     - /etc/nginx/vhost.d/
  #     - ./docker/certs/:/etc/nginx/certs/:rw # ./docker/certs/ にSSL証明書を書き込めるように rw モードで共有
  #   depends_on:
  #     - nginx-proxy # nginx-proxyコンテナの後で起動
  #   environment:
  #     NGINX_PROXY_CONTAINER: nginx-proxy

# ボリュームコンテナ
volumes:
  db-data:
    driver: local
