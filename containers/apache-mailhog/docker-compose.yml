version: "3"

services:
  # Apache + PHP WEBサーバ
  web:
    build: ./docker/web
    links:
      - db # dbコンテナとリンク
      - mailhog # mailhogコンテナとリンク
    volumes:
      # 共有ディレクトリ
      - ./web-data/:/var/www/html/ # ドキュメントルート
      # virtualhost設定ファイル
      - ./docker/web/000-default.conf:/etc/apache2/sites-available/000-default.conf
      # php設定ファイルを共有
      - ./docker/web/php.ini:/usr/local/etc/php/php.ini
    # コンテナ内のApache実行ユーザー`www-data`のユーザーIDを環境変数`UID`に変更してApache起動
    command: bash -c 'usermod -o -u ${UID} www-data; groupmod -o -g ${UID} www-data; apachectl -D FOREGROUND'
    environment:
      # Composer設定
      COMPOSER_ALLOW_SUPERUSER: 1 # root権限での実行を許可
      COMPOSER_NO_INTERACTION: 1  # 非対話的にインストール
      # dbコンテナのDBに接続するための環境設定
      DB_HOST: mysql
      DB_DATABASE: web
      DB_USERNAME: root
      DB_PASSWORD: root
      # VIRTUAL_HOST設定（nginx-proxy）
      CERT_NAME: default # ローカル開発時は自己証明書を使う
      VIRTUAL_HOST: web.local # http://web.local/ => docker://web:80
      VIRTUAL_PORT: 80
      # mailhogコンテナに接続するための環境設定
      # MAIL_DRIVER: smtp
      # MAIL_HOST: mailhog
      # MAIL_PORT: 1025
      # MAIL_ENCRYPTION: null
  
  # MySQL
  db:
    build: ./docker/db
    volumes:
      # DB永続化
      - db-data:/var/lib/mysql
      # 起動時にinitdb.d内で定義されたデータベースを構築する
      - ./docker/db/initdb.d/:/docker-entrypoint-initdb.d/
      # マウントディレクトリ
      - ./docker/dump/:/var/dump/
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: web

  # phpMyAdmin
  pma:
    image: phpmyadmin/phpmyadmin:latest
    links:
      - db
    environment:
      PMA_HOST: db
      # VIRTUAL_HOST設定（nginx-proxy）
      VIRTUAL_HOST: pma.web.local # http://pma.web.local/ => docker://pma:80
      VIRTUAL_PORT: 80
  
  # ローカルSMTPサーバ
  mailhog:
    image: mailhog/mailhog
    #ports:
      # - 3000:8025 # HTTP Port (nginx-proxyコンテナを使っているならポート設定は不要)
      # - 4000:1025 # SMTP Port
    environment:
      # VIRTUAL_HOST設定（nginx-proxy）
      VIRTUAL_HOST: mail.web.local # http://mail.web.local/ => docker://mailhog:8025
      VIRTUAL_PORT: 8025
  
  # vhostプロキシサーバ
  nginx-proxy:
    image: jwilder/nginx-proxy
    privileged: true # ルート権限
    ports:
      - "80:80" # http
      - "443:443" # https
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /usr/share/nginx/html
      - /etc/nginx/vhost.d
      - ./docker/certs:/etc/nginx/certs:ro # letsencryptコンテナが ./docker/certs/ に作成したSSL証明書を読む
    environment:
      DHPARAM_GENERATION: "false"
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"

  # 無料SSL証明書発行コンテナ
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /usr/share/nginx/html
      - /etc/nginx/vhost.d
      - ./docker/certs:/etc/nginx/certs:rw # ./docker/certs/ にSSL証明書を書き込めるように rw モードで共有
    depends_on:
      - nginx-proxy # nginx-proxyコンテナの後で起動
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy

volumes:
  # dbコンテナ永続化用ボリュームコンテナ
  db-data:
    driver: local
